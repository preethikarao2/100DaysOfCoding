/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list =new ArrayList<>();
        if(root==null)
            return list;
        Queue<TreeNode> queue=new LinkedList();
        queue.add(root);
        while(!queue.isEmpty()){
            int size=queue.size();
             List<Integer> temp=new ArrayList<>();
            for(int i=0;i<size;i++){
           
            TreeNode top=queue.poll();
            temp.add(top.val);
            if(top.left!=null)
                queue.add(top.left);
            if(top.right!=null)
                queue.add(top.right);
            }
            list.add(temp);
            
        }
       return list; 
        
    }
}



/*
printLevelorder(tree)
1) Create an empty queue q
2) temp_node = root /*start from root*/
3) Loop while temp_node is not NULL
    a) print temp_node->data.
    b) Enqueue temp_nodeâ€™s children 
      (first left then right children) to q
    c) Dequeue a node from q.
    
    */
